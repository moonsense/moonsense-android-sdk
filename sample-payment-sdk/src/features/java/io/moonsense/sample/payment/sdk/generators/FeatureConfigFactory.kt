package io.moonsense.sample.payment.sdk.generators

import io.moonsense.features.CompositeFeatureGenerator
import io.moonsense.features.DeviceMotionFeatureGenerator
import io.moonsense.features.PointerFeatureGenerator
import io.moonsense.features.operator.Operator
import io.moonsense.features.transform.FocusChangeTransform
import io.moonsense.models.v2.FocusChange
import io.moonsense.sdk.config.NetworkTelemetryConfig
import io.moonsense.sdk.config.SessionConfig
import io.moonsense.sdk.features.FeatureGenerator

/**
 * Responsible for returning a [SessionConfig] with [FeatureGenerator]s
 * and a [NetworkTelemetryConfig].
 */
internal object FeatureConfigFactory {

    /**
     * Return a session config with features generated by a set of
     * configured [FeatureGenerator]s.
     *
     * Also enable ip based network telemetry data that captures
     * network based features.
     */
    fun getSessionConfig(): SessionConfig? = SessionConfig(
        featureGenerators = listOf(
            // generators for all device motion sensors
            DeviceMotionFeatureGenerator(),
            // generators for summarizing pointer data
            PointerFeatureGenerator(),
            // a composite generator that count the number of times an edit text gains focus
            CompositeFeatureGenerator(
                listOf(
                    FocusChangeTransform(
                        "focus_gained" to { focusChange ->
                            if (focusChange.type == FocusChange.Type.FOCUS_GAINED) {
                                1.0
                            } else {
                                null
                            }
                        }
                    )
                ),
                Operator.COUNT
            )
        ),
        networkTelemetryConfig = NetworkTelemetryConfig(ip = true)
    )
}
